/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.sru;

import java.io.UnsupportedEncodingException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestHandle;
import com.loopj.android.http.RequestParams;

import cz.msebera.android.httpclient.Header;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@Kroll.proxy(creatableInModule = SruModule.class)
public class EndpointProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "SRU";
	private String url;
	private String accesstoken = null;
	private String version = "1.2";
	Context ctx = TiApplication.getInstance().getApplicationContext();
	AsyncHttpClient client = new AsyncHttpClient();

	private KrollObject kroll;
	private Boolean aborted = false;
	private int connectTimeout;

	// Constructor
	public EndpointProxy() {
		super();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		if (options.containsKey("url")) {
			url = options.getString("url");
		}
		if (options.containsKey("accesstoken")) {
			accesstoken = options.getString("accesstoken");
		}
		if (options.containsKey("version")) {
			version = options.getString("version");
		}
	}

	// Methods
	@Kroll.method
	public void printMessage(String message) {
		Log.d(LCAT, "printing message: " + message);
	}

	@Kroll.method
	public void explaine(KrollFunction callback) {
		startAsyncRequest("explain", null, callback);
	}

	@Kroll.method
	public void query(String query, KrollFunction callback) {
		startAsyncRequest("searchretreive", query, callback);
	}

	private void startAsyncRequest(final String verb, final String query,
			final KrollFunction callback) {

		RequestParams requestParams = new RequestParams();
		requestParams.put("verb", verb);
		if (accesstoken != null) {
			requestParams.put("accesstoken", accesstoken);
		}
		if (query != null) {
			requestParams.put("query", query);
		}
		requestParams.put("version", version);

		client.setConnectTimeout(connectTimeout);
		Log.d(LCAT, url + "?" + requestParams.toString());
		client.setMaxRetriesAndTimeout(3, connectTimeout);
		client.addHeader("Accept", "text/xml");
		client.get(url, requestParams, new AsyncHttpResponseHandler() {
			@Override
			public void onFailure(int status, Header[] header, byte[] response,
					Throwable arg3) {

			}

			@Override
			public void onSuccess(int status, Header[] header, byte[] response) {
				if (EndpointProxy.this.aborted == true) {
					if (client != null)
						client.cancelAllRequests(true);
					return;
				} else {
					String xml = responseToString(header, response);
					org.json.jsonjava.JSONObject json = new org.json.jsonjava.JSONObject();
					try {
						String escapedXml = xml;// StringEscapeUtils.unescapeHtml(xml);
						json = org.json.jsonjava.XML.toJSONObject(escapedXml);
					} catch (org.json.jsonjava.JSONException ex) {
					}
					JSONObject jsonresult = (JSONObject) JSONtoKrollDict((Object)json);
					try {
						if (callback != null)
							callback.call(getKrollObject(), new KrollDict(
									jsonresult));
					} catch (JSONException e) {
						e.printStackTrace();
					}
				}
			}
		});
	}
	
	public static String responseToString(Header[] header, byte[] response) {
		String charset = "UTF-8";
		for (int i = 0; i < header.length; i++) {
			if (header[i].getName() == "Content-Type") {
				String[] parts = header[i].getValue().split("; ");
				if (parts != null) {
					charset = parts[1].replace("charset=", "").toUpperCase();
				}
			}
		}
		String xml = "";
		try {
			xml = new String(response, charset);
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}
		return xml;
	}
	public static Object JSONtoKrollDict(Object value) {
		try {
			if (value instanceof org.json.jsonjava.JSONObject) {
				org.json.jsonjava.JSONObject foo = (org.json.jsonjava.JSONObject) value;
				JSONObject bar = new JSONObject();
				for (String key : foo.keySet()) {
					bar.put(key, JSONtoKrollDict(foo.get(key)));
				}
				return (Object) bar;
			} else if (value instanceof org.json.jsonjava.JSONArray) {
				org.json.jsonjava.JSONArray foo = (org.json.jsonjava.JSONArray) value;
				JSONArray bar = new JSONArray();
				for (int i = 0; i < foo.length(); i++) {
					bar.put(JSONtoKrollDict(foo.get(i)));
				}
				JSONObject res = new JSONObject();
				res.put("list", bar);
				return (Object) res;
			} else if (value == org.json.jsonjava.JSONObject.NULL) {
				return null;
			} else if (value instanceof String) {
				return value;
			}
		} catch (JSONException e) {
		}
		return value;
	}
}
